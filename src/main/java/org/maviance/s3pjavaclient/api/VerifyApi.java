/*
 * Smobilpay S3P API
 * Smobilpay Third Party API FOR PAYMENT COLLECTIONS
 *
 * OpenAPI spec version: 3.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.maviance.s3pjavaclient.api;

import org.maviance.s3pjavaclient.ApiCallback;
import org.maviance.s3pjavaclient.ApiClient;
import org.maviance.s3pjavaclient.ApiException;
import org.maviance.s3pjavaclient.ApiResponse;
import org.maviance.s3pjavaclient.Configuration;
import org.maviance.s3pjavaclient.Pair;
import org.maviance.s3pjavaclient.ProgressRequestBody;
import org.maviance.s3pjavaclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.maviance.s3pjavaclient.model.Error;
import org.threeten.bp.LocalDate;
import org.maviance.s3pjavaclient.model.PaymentStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerifyApi {
    private ApiClient apiClient;

    public VerifyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for historystdGet
     * @param xApiVersion api version info (required)
     * @param timestampFrom Start date of transactions in result set (ISO 8601) (optional)
     * @param timestampTo End date of transactions in result set (ISO 8601) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call historystdGetCall(String xApiVersion, LocalDate timestampFrom, LocalDate timestampTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/historystd";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestampFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp_from", timestampFrom));
        if (timestampTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp_to", timestampTo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiVersion != null)
        localVarHeaderParams.put("x-api-version", apiClient.parameterToString(xApiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call historystdGetValidateBeforeCall(String xApiVersion, LocalDate timestampFrom, LocalDate timestampTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling historystdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = historystdGetCall(xApiVersion, timestampFrom, timestampTo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve list of historic payment collection.
     * This endpoint allows the search for historic payment collection records by time that was provided during payment collection. Both parameters have to be provided!
     * @param xApiVersion api version info (required)
     * @param timestampFrom Start date of transactions in result set (ISO 8601) (optional)
     * @param timestampTo End date of transactions in result set (ISO 8601) (optional)
     * @return List&lt;PaymentStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PaymentStatus> historystdGet(String xApiVersion, LocalDate timestampFrom, LocalDate timestampTo) throws ApiException {
        ApiResponse<List<PaymentStatus>> resp = historystdGetWithHttpInfo(xApiVersion, timestampFrom, timestampTo);
        return resp.getData();
    }

    /**
     * Retrieve list of historic payment collection.
     * This endpoint allows the search for historic payment collection records by time that was provided during payment collection. Both parameters have to be provided!
     * @param xApiVersion api version info (required)
     * @param timestampFrom Start date of transactions in result set (ISO 8601) (optional)
     * @param timestampTo End date of transactions in result set (ISO 8601) (optional)
     * @return ApiResponse&lt;List&lt;PaymentStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PaymentStatus>> historystdGetWithHttpInfo(String xApiVersion, LocalDate timestampFrom, LocalDate timestampTo) throws ApiException {
        com.squareup.okhttp.Call call = historystdGetValidateBeforeCall(xApiVersion, timestampFrom, timestampTo, null, null);
        Type localVarReturnType = new TypeToken<List<PaymentStatus>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve list of historic payment collection. (asynchronously)
     * This endpoint allows the search for historic payment collection records by time that was provided during payment collection. Both parameters have to be provided!
     * @param xApiVersion api version info (required)
     * @param timestampFrom Start date of transactions in result set (ISO 8601) (optional)
     * @param timestampTo End date of transactions in result set (ISO 8601) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call historystdGetAsync(String xApiVersion, LocalDate timestampFrom, LocalDate timestampTo, final ApiCallback<List<PaymentStatus>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = historystdGetValidateBeforeCall(xApiVersion, timestampFrom, timestampTo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PaymentStatus>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for verifytxGet
     * @param xApiVersion api version info (required)
     * @param ptn Unique payment collection transaction number (optional)
     * @param trid custom external transaction reference provided during payment collection (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call verifytxGetCall(String xApiVersion, String ptn, String trid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/verifytx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ptn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ptn", ptn));
        if (trid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trid", trid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiVersion != null)
        localVarHeaderParams.put("x-api-version", apiClient.parameterToString(xApiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call verifytxGetValidateBeforeCall(String xApiVersion, String ptn, String trid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling verifytxGet(Async)");
        }
        
        com.squareup.okhttp.Call call = verifytxGetCall(xApiVersion, ptn, trid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the current payment collection status
     * Call this endpoint to retrieve the current payment status by either transaction number (PTN) or the custom transaction reference (TRID) that was provided during payment collection. At least one of these parameters has to be provided!
     * @param xApiVersion api version info (required)
     * @param ptn Unique payment collection transaction number (optional)
     * @param trid custom external transaction reference provided during payment collection (optional)
     * @return List&lt;PaymentStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PaymentStatus> verifytxGet(String xApiVersion, String ptn, String trid) throws ApiException {
        ApiResponse<List<PaymentStatus>> resp = verifytxGetWithHttpInfo(xApiVersion, ptn, trid);
        return resp.getData();
    }

    /**
     * Get the current payment collection status
     * Call this endpoint to retrieve the current payment status by either transaction number (PTN) or the custom transaction reference (TRID) that was provided during payment collection. At least one of these parameters has to be provided!
     * @param xApiVersion api version info (required)
     * @param ptn Unique payment collection transaction number (optional)
     * @param trid custom external transaction reference provided during payment collection (optional)
     * @return ApiResponse&lt;List&lt;PaymentStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PaymentStatus>> verifytxGetWithHttpInfo(String xApiVersion, String ptn, String trid) throws ApiException {
        com.squareup.okhttp.Call call = verifytxGetValidateBeforeCall(xApiVersion, ptn, trid, null, null);
        Type localVarReturnType = new TypeToken<List<PaymentStatus>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the current payment collection status (asynchronously)
     * Call this endpoint to retrieve the current payment status by either transaction number (PTN) or the custom transaction reference (TRID) that was provided during payment collection. At least one of these parameters has to be provided!
     * @param xApiVersion api version info (required)
     * @param ptn Unique payment collection transaction number (optional)
     * @param trid custom external transaction reference provided during payment collection (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifytxGetAsync(String xApiVersion, String ptn, String trid, final ApiCallback<List<PaymentStatus>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifytxGetValidateBeforeCall(xApiVersion, ptn, trid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PaymentStatus>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
