/*
 * Smobilpay S3P API
 * Smobilpay Third Party API FOR PAYMENT COLLECTIONS
 *
 * OpenAPI spec version: 3.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.maviance.s3pjavaclient.api;

import org.maviance.s3pjavaclient.ApiCallback;
import org.maviance.s3pjavaclient.ApiClient;
import org.maviance.s3pjavaclient.ApiException;
import org.maviance.s3pjavaclient.ApiResponse;
import org.maviance.s3pjavaclient.Configuration;
import org.maviance.s3pjavaclient.Pair;
import org.maviance.s3pjavaclient.ProgressRequestBody;
import org.maviance.s3pjavaclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.maviance.s3pjavaclient.model.Cashin;
import org.maviance.s3pjavaclient.model.Cashout;
import org.maviance.s3pjavaclient.model.Error;
import org.maviance.s3pjavaclient.model.Merchant;
import org.maviance.s3pjavaclient.model.Product;
import org.maviance.s3pjavaclient.model.Service;
import org.maviance.s3pjavaclient.model.Topup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MasterdataApi {
    private ApiClient apiClient;

    public MasterdataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MasterdataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cashinGet
     * @param xApiVersion api version info (required)
     * @param serviceid Filter cashin packages for only the selected service (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cashinGetCall(String xApiVersion, Integer serviceid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cashin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceid", serviceid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiVersion != null)
        localVarHeaderParams.put("x-api-version", apiClient.parameterToString(xApiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cashinGetValidateBeforeCall(String xApiVersion, Integer serviceid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling cashinGet(Async)");
        }
        
        com.squareup.okhttp.Call call = cashinGetCall(xApiVersion, serviceid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve available cashin packages
     * This service provides available cashin packages to be made to the system.
     * @param xApiVersion api version info (required)
     * @param serviceid Filter cashin packages for only the selected service (optional)
     * @return List&lt;Cashin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Cashin> cashinGet(String xApiVersion, Integer serviceid) throws ApiException {
        ApiResponse<List<Cashin>> resp = cashinGetWithHttpInfo(xApiVersion, serviceid);
        return resp.getData();
    }

    /**
     * Retrieve available cashin packages
     * This service provides available cashin packages to be made to the system.
     * @param xApiVersion api version info (required)
     * @param serviceid Filter cashin packages for only the selected service (optional)
     * @return ApiResponse&lt;List&lt;Cashin&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Cashin>> cashinGetWithHttpInfo(String xApiVersion, Integer serviceid) throws ApiException {
        com.squareup.okhttp.Call call = cashinGetValidateBeforeCall(xApiVersion, serviceid, null, null);
        Type localVarReturnType = new TypeToken<List<Cashin>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available cashin packages (asynchronously)
     * This service provides available cashin packages to be made to the system.
     * @param xApiVersion api version info (required)
     * @param serviceid Filter cashin packages for only the selected service (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cashinGetAsync(String xApiVersion, Integer serviceid, final ApiCallback<List<Cashin>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cashinGetValidateBeforeCall(xApiVersion, serviceid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Cashin>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cashoutGet
     * @param xApiVersion api version info (required)
     * @param serviceid Filter cashout packages for only the selected service (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cashoutGetCall(String xApiVersion, Integer serviceid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cashout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceid", serviceid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiVersion != null)
        localVarHeaderParams.put("x-api-version", apiClient.parameterToString(xApiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cashoutGetValidateBeforeCall(String xApiVersion, Integer serviceid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling cashoutGet(Async)");
        }
        
        com.squareup.okhttp.Call call = cashoutGetCall(xApiVersion, serviceid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves available cashout packages
     * This service provides available cashout packages to be made to the system.
     * @param xApiVersion api version info (required)
     * @param serviceid Filter cashout packages for only the selected service (optional)
     * @return List&lt;Cashout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Cashout> cashoutGet(String xApiVersion, Integer serviceid) throws ApiException {
        ApiResponse<List<Cashout>> resp = cashoutGetWithHttpInfo(xApiVersion, serviceid);
        return resp.getData();
    }

    /**
     * Retrieves available cashout packages
     * This service provides available cashout packages to be made to the system.
     * @param xApiVersion api version info (required)
     * @param serviceid Filter cashout packages for only the selected service (optional)
     * @return ApiResponse&lt;List&lt;Cashout&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Cashout>> cashoutGetWithHttpInfo(String xApiVersion, Integer serviceid) throws ApiException {
        com.squareup.okhttp.Call call = cashoutGetValidateBeforeCall(xApiVersion, serviceid, null, null);
        Type localVarReturnType = new TypeToken<List<Cashout>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves available cashout packages (asynchronously)
     * This service provides available cashout packages to be made to the system.
     * @param xApiVersion api version info (required)
     * @param serviceid Filter cashout packages for only the selected service (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cashoutGetAsync(String xApiVersion, Integer serviceid, final ApiCallback<List<Cashout>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cashoutGetValidateBeforeCall(xApiVersion, serviceid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Cashout>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for merchantGet
     * @param xApiVersion api version info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call merchantGetCall(String xApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/merchant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiVersion != null)
        localVarHeaderParams.put("x-api-version", apiClient.parameterToString(xApiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call merchantGetValidateBeforeCall(String xApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling merchantGet(Async)");
        }
        
        com.squareup.okhttp.Call call = merchantGetCall(xApiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve list of merchants supported by the system.
     * Provides merchants supported by the system. Every service is assigned to a merchant.
     * @param xApiVersion api version info (required)
     * @return List&lt;Merchant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Merchant> merchantGet(String xApiVersion) throws ApiException {
        ApiResponse<List<Merchant>> resp = merchantGetWithHttpInfo(xApiVersion);
        return resp.getData();
    }

    /**
     * Retrieve list of merchants supported by the system.
     * Provides merchants supported by the system. Every service is assigned to a merchant.
     * @param xApiVersion api version info (required)
     * @return ApiResponse&lt;List&lt;Merchant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Merchant>> merchantGetWithHttpInfo(String xApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = merchantGetValidateBeforeCall(xApiVersion, null, null);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve list of merchants supported by the system. (asynchronously)
     * Provides merchants supported by the system. Every service is assigned to a merchant.
     * @param xApiVersion api version info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call merchantGetAsync(String xApiVersion, final ApiCallback<List<Merchant>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = merchantGetValidateBeforeCall(xApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productGet
     * @param xApiVersion api version info (required)
     * @param serviceid Filter products to only the selected service (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productGetCall(String xApiVersion, Integer serviceid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceid", serviceid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiVersion != null)
        localVarHeaderParams.put("x-api-version", apiClient.parameterToString(xApiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productGetValidateBeforeCall(String xApiVersion, Integer serviceid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling productGet(Async)");
        }
        
        com.squareup.okhttp.Call call = productGetCall(xApiVersion, serviceid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve list of available products
     * This service provides a list of all available products for all services.
     * @param xApiVersion api version info (required)
     * @param serviceid Filter products to only the selected service (optional)
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Product> productGet(String xApiVersion, Integer serviceid) throws ApiException {
        ApiResponse<List<Product>> resp = productGetWithHttpInfo(xApiVersion, serviceid);
        return resp.getData();
    }

    /**
     * Retrieve list of available products
     * This service provides a list of all available products for all services.
     * @param xApiVersion api version info (required)
     * @param serviceid Filter products to only the selected service (optional)
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Product>> productGetWithHttpInfo(String xApiVersion, Integer serviceid) throws ApiException {
        com.squareup.okhttp.Call call = productGetValidateBeforeCall(xApiVersion, serviceid, null, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve list of available products (asynchronously)
     * This service provides a list of all available products for all services.
     * @param xApiVersion api version info (required)
     * @param serviceid Filter products to only the selected service (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productGetAsync(String xApiVersion, Integer serviceid, final ApiCallback<List<Product>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productGetValidateBeforeCall(xApiVersion, serviceid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for serviceGet
     * @param xApiVersion api version info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceGetCall(String xApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/service";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiVersion != null)
        localVarHeaderParams.put("x-api-version", apiClient.parameterToString(xApiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceGetValidateBeforeCall(String xApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling serviceGet(Async)");
        }
        
        com.squareup.okhttp.Call call = serviceGetCall(xApiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve list of services supported by the system.
     * This service endpoint provides information about the services supported by . Each service has its own set of required input parameters which need to be provided during the collection request - starting with the prefix “isReq”. It is recommended that the application UI is configured based on the response values provided here. The service response will also specify the type of the service and thus detail how the related payment items can be retrieved and collected. 
     * @param xApiVersion api version info (required)
     * @return List&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Service> serviceGet(String xApiVersion) throws ApiException {
        ApiResponse<List<Service>> resp = serviceGetWithHttpInfo(xApiVersion);
        return resp.getData();
    }

    /**
     * Retrieve list of services supported by the system.
     * This service endpoint provides information about the services supported by . Each service has its own set of required input parameters which need to be provided during the collection request - starting with the prefix “isReq”. It is recommended that the application UI is configured based on the response values provided here. The service response will also specify the type of the service and thus detail how the related payment items can be retrieved and collected. 
     * @param xApiVersion api version info (required)
     * @return ApiResponse&lt;List&lt;Service&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Service>> serviceGetWithHttpInfo(String xApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = serviceGetValidateBeforeCall(xApiVersion, null, null);
        Type localVarReturnType = new TypeToken<List<Service>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve list of services supported by the system. (asynchronously)
     * This service endpoint provides information about the services supported by . Each service has its own set of required input parameters which need to be provided during the collection request - starting with the prefix “isReq”. It is recommended that the application UI is configured based on the response values provided here. The service response will also specify the type of the service and thus detail how the related payment items can be retrieved and collected. 
     * @param xApiVersion api version info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceGetAsync(String xApiVersion, final ApiCallback<List<Service>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceGetValidateBeforeCall(xApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Service>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for serviceIdGet
     * @param xApiVersion api version info (required)
     * @param id Unique  service Identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceIdGetCall(String xApiVersion, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/service/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiVersion != null)
        localVarHeaderParams.put("x-api-version", apiClient.parameterToString(xApiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceIdGetValidateBeforeCall(String xApiVersion, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling serviceIdGet(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling serviceIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = serviceIdGetCall(xApiVersion, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve single service
     * This service endpoint provides information about the selected service. Each service has its own set of required input parameters which need to be provided during the collection request - starting with the prefix “isReq”. It is recommended that the application UI is configured based on the response values provided here. The service response will also specify the type of the service and thus detail how the related payment items can be retrieved and collected.
     * @param xApiVersion api version info (required)
     * @param id Unique  service Identifier. (required)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Service serviceIdGet(String xApiVersion, Integer id) throws ApiException {
        ApiResponse<Service> resp = serviceIdGetWithHttpInfo(xApiVersion, id);
        return resp.getData();
    }

    /**
     * Retrieve single service
     * This service endpoint provides information about the selected service. Each service has its own set of required input parameters which need to be provided during the collection request - starting with the prefix “isReq”. It is recommended that the application UI is configured based on the response values provided here. The service response will also specify the type of the service and thus detail how the related payment items can be retrieved and collected.
     * @param xApiVersion api version info (required)
     * @param id Unique  service Identifier. (required)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Service> serviceIdGetWithHttpInfo(String xApiVersion, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = serviceIdGetValidateBeforeCall(xApiVersion, id, null, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve single service (asynchronously)
     * This service endpoint provides information about the selected service. Each service has its own set of required input parameters which need to be provided during the collection request - starting with the prefix “isReq”. It is recommended that the application UI is configured based on the response values provided here. The service response will also specify the type of the service and thus detail how the related payment items can be retrieved and collected.
     * @param xApiVersion api version info (required)
     * @param id Unique  service Identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceIdGetAsync(String xApiVersion, Integer id, final ApiCallback<Service> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceIdGetValidateBeforeCall(xApiVersion, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for topupGet
     * @param xApiVersion api version info (required)
     * @param serviceid Filter topups to only the selected service (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call topupGetCall(String xApiVersion, Integer serviceid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/topup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceid", serviceid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiVersion != null)
        localVarHeaderParams.put("x-api-version", apiClient.parameterToString(xApiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call topupGetValidateBeforeCall(String xApiVersion, Integer serviceid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling topupGet(Async)");
        }
        
        com.squareup.okhttp.Call call = topupGetCall(xApiVersion, serviceid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve available topup packages
     * This service provides a list of all available topup packages. DEPRECTATED: Some providers will return a digital code for manual redeeming. This code will be provided in the response object of a successful collection. This functionality has been moved into the /voucher endpoint and will be removed in the next version of this API
     * @param xApiVersion api version info (required)
     * @param serviceid Filter topups to only the selected service (optional)
     * @return List&lt;Topup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Topup> topupGet(String xApiVersion, Integer serviceid) throws ApiException {
        ApiResponse<List<Topup>> resp = topupGetWithHttpInfo(xApiVersion, serviceid);
        return resp.getData();
    }

    /**
     * Retrieve available topup packages
     * This service provides a list of all available topup packages. DEPRECTATED: Some providers will return a digital code for manual redeeming. This code will be provided in the response object of a successful collection. This functionality has been moved into the /voucher endpoint and will be removed in the next version of this API
     * @param xApiVersion api version info (required)
     * @param serviceid Filter topups to only the selected service (optional)
     * @return ApiResponse&lt;List&lt;Topup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Topup>> topupGetWithHttpInfo(String xApiVersion, Integer serviceid) throws ApiException {
        com.squareup.okhttp.Call call = topupGetValidateBeforeCall(xApiVersion, serviceid, null, null);
        Type localVarReturnType = new TypeToken<List<Topup>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available topup packages (asynchronously)
     * This service provides a list of all available topup packages. DEPRECTATED: Some providers will return a digital code for manual redeeming. This code will be provided in the response object of a successful collection. This functionality has been moved into the /voucher endpoint and will be removed in the next version of this API
     * @param xApiVersion api version info (required)
     * @param serviceid Filter topups to only the selected service (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call topupGetAsync(String xApiVersion, Integer serviceid, final ApiCallback<List<Topup>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = topupGetValidateBeforeCall(xApiVersion, serviceid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Topup>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for voucherGet
     * @param xApiVersion api version info (required)
     * @param serviceid Filter products to only the selected service (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call voucherGetCall(String xApiVersion, Integer serviceid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/voucher";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceid", serviceid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiVersion != null)
        localVarHeaderParams.put("x-api-version", apiClient.parameterToString(xApiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call voucherGetValidateBeforeCall(String xApiVersion, Integer serviceid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling voucherGet(Async)");
        }
        
        com.squareup.okhttp.Call call = voucherGetCall(xApiVersion, serviceid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve list of available vouchers to purchase
     * This service provides a list of all available vouchers for all services. A purchase of a voucher will return a digital code for manual redeeming. This code will be provided in the response object of a successful collection.
     * @param xApiVersion api version info (required)
     * @param serviceid Filter products to only the selected service (optional)
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Product> voucherGet(String xApiVersion, Integer serviceid) throws ApiException {
        ApiResponse<List<Product>> resp = voucherGetWithHttpInfo(xApiVersion, serviceid);
        return resp.getData();
    }

    /**
     * Retrieve list of available vouchers to purchase
     * This service provides a list of all available vouchers for all services. A purchase of a voucher will return a digital code for manual redeeming. This code will be provided in the response object of a successful collection.
     * @param xApiVersion api version info (required)
     * @param serviceid Filter products to only the selected service (optional)
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Product>> voucherGetWithHttpInfo(String xApiVersion, Integer serviceid) throws ApiException {
        com.squareup.okhttp.Call call = voucherGetValidateBeforeCall(xApiVersion, serviceid, null, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve list of available vouchers to purchase (asynchronously)
     * This service provides a list of all available vouchers for all services. A purchase of a voucher will return a digital code for manual redeeming. This code will be provided in the response object of a successful collection.
     * @param xApiVersion api version info (required)
     * @param serviceid Filter products to only the selected service (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call voucherGetAsync(String xApiVersion, Integer serviceid, final ApiCallback<List<Product>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = voucherGetValidateBeforeCall(xApiVersion, serviceid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
