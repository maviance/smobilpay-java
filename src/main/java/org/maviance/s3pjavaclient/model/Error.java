/*
 * Smobilpay S3P API
 * Smobilpay Third Party API FOR PAYMENT COLLECTIONS
 *
 * OpenAPI spec version: 3.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.maviance.s3pjavaclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Error
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-18T05:58:05.742+01:00[Africa/Douala]")
public class Error {
  @SerializedName("respCode")
  private Integer respCode = null;

  @SerializedName("devMsg")
  private String devMsg = null;

  @SerializedName("usrMsg")
  private String usrMsg = null;

  @SerializedName("link")
  private String link = null;

  public Error respCode(Integer respCode) {
    this.respCode = respCode;
    return this;
  }

   /**
   * Unique error response code identifying the issue. We recommend you use this code for internal error handling.
   * @return respCode
  **/
  @Schema(required = true, description = "Unique error response code identifying the issue. We recommend you use this code for internal error handling.")
  public Integer getRespCode() {
    return respCode;
  }

  public void setRespCode(Integer respCode) {
    this.respCode = respCode;
  }

  public Error devMsg(String devMsg) {
    this.devMsg = devMsg;
    return this;
  }

   /**
   * Verbose, plain language description of the problem for the app developer with hints about how to fix it, if applicable.
   * @return devMsg
  **/
  @Schema(required = true, description = "Verbose, plain language description of the problem for the app developer with hints about how to fix it, if applicable.")
  public String getDevMsg() {
    return devMsg;
  }

  public void setDevMsg(String devMsg) {
    this.devMsg = devMsg;
  }

  public Error usrMsg(String usrMsg) {
    this.usrMsg = usrMsg;
    return this;
  }

   /**
   * High level error message that can be passed on to the actual user - if required.
   * @return usrMsg
  **/
  @Schema(required = true, description = "High level error message that can be passed on to the actual user - if required.")
  public String getUsrMsg() {
    return usrMsg;
  }

  public void setUsrMsg(String usrMsg) {
    this.usrMsg = usrMsg;
  }

  public Error link(String link) {
    this.link = link;
    return this;
  }

   /**
   * Link to documentation for this error response code – if available
   * @return link
  **/
  @Schema(required = true, description = "Link to documentation for this error response code – if available")
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Error error = (Error) o;
    return Objects.equals(this.respCode, error.respCode) &&
        Objects.equals(this.devMsg, error.devMsg) &&
        Objects.equals(this.usrMsg, error.usrMsg) &&
        Objects.equals(this.link, error.link);
  }

  @Override
  public int hashCode() {
    return Objects.hash(respCode, devMsg, usrMsg, link);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Error {\n");
    
    sb.append("    respCode: ").append(toIndentedString(respCode)).append("\n");
    sb.append("    devMsg: ").append(toIndentedString(devMsg)).append("\n");
    sb.append("    usrMsg: ").append(toIndentedString(usrMsg)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
