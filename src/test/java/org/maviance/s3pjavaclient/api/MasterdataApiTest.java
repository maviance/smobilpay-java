/*
 * Smobilpay S3P API
 * Smobilpay Third Party API FOR PAYMENT COLLECTIONS
 *
 * OpenAPI spec version: 3.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.maviance.s3pjavaclient.api;

import org.maviance.s3pjavaclient.ApiException;
import org.maviance.s3pjavaclient.model.Cashin;
import org.maviance.s3pjavaclient.model.Cashout;
import org.maviance.s3pjavaclient.model.Error;
import org.maviance.s3pjavaclient.model.Merchant;
import org.maviance.s3pjavaclient.model.Product;
import org.maviance.s3pjavaclient.model.Service;
import org.maviance.s3pjavaclient.model.Topup;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MasterdataApi
 */
@Ignore
public class MasterdataApiTest {

    private final MasterdataApi api = new MasterdataApi();

    /**
     * Retrieve available cashin packages
     *
     * This service provides available cashin packages to be made to the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cashinGetTest() throws ApiException {
        String xApiVersion = null;
        Integer serviceid = null;
        List<Cashin> response = api.cashinGet(xApiVersion, serviceid);

        // TODO: test validations
    }
    /**
     * Retrieves available cashout packages
     *
     * This service provides available cashout packages to be made to the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cashoutGetTest() throws ApiException {
        String xApiVersion = null;
        Integer serviceid = null;
        List<Cashout> response = api.cashoutGet(xApiVersion, serviceid);

        // TODO: test validations
    }
    /**
     * Retrieve list of merchants supported by the system.
     *
     * Provides merchants supported by the system. Every service is assigned to a merchant.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantGetTest() throws ApiException {
        String xApiVersion = null;
        List<Merchant> response = api.merchantGet(xApiVersion);

        // TODO: test validations
    }
    /**
     * Retrieve list of available products
     *
     * This service provides a list of all available products for all services.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productGetTest() throws ApiException {
        String xApiVersion = null;
        Integer serviceid = null;
        List<Product> response = api.productGet(xApiVersion, serviceid);

        // TODO: test validations
    }
    /**
     * Retrieve list of services supported by the system.
     *
     * This service endpoint provides information about the services supported by . Each service has its own set of required input parameters which need to be provided during the collection request - starting with the prefix “isReq”. It is recommended that the application UI is configured based on the response values provided here. The service response will also specify the type of the service and thus detail how the related payment items can be retrieved and collected. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceGetTest() throws ApiException {
        String xApiVersion = null;
        List<Service> response = api.serviceGet(xApiVersion);

        // TODO: test validations
    }
    /**
     * Retrieve single service
     *
     * This service endpoint provides information about the selected service. Each service has its own set of required input parameters which need to be provided during the collection request - starting with the prefix “isReq”. It is recommended that the application UI is configured based on the response values provided here. The service response will also specify the type of the service and thus detail how the related payment items can be retrieved and collected.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceIdGetTest() throws ApiException {
        String xApiVersion = null;
        Integer id = null;
        Service response = api.serviceIdGet(xApiVersion, id);

        // TODO: test validations
    }
    /**
     * Retrieve available topup packages
     *
     * This service provides a list of all available topup packages. DEPRECTATED: Some providers will return a digital code for manual redeeming. This code will be provided in the response object of a successful collection. This functionality has been moved into the /voucher endpoint and will be removed in the next version of this API
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void topupGetTest() throws ApiException {
        String xApiVersion = null;
        Integer serviceid = null;
        List<Topup> response = api.topupGet(xApiVersion, serviceid);

        // TODO: test validations
    }
    /**
     * Retrieve list of available vouchers to purchase
     *
     * This service provides a list of all available vouchers for all services. A purchase of a voucher will return a digital code for manual redeeming. This code will be provided in the response object of a successful collection.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voucherGetTest() throws ApiException {
        String xApiVersion = null;
        Integer serviceid = null;
        List<Product> response = api.voucherGet(xApiVersion, serviceid);

        // TODO: test validations
    }
}
